PREP_SCRIPT=prep.sh
EXERCISE_ENVFILE=./.exenv
EXERCISE_SETUP_ENVFILE=./.exsetupenv
EXERCISE_SETUP_TEXT=setup.md
EXERCISE_MATERIALS=.materials
INSTRUCTIONS_TEXT=instructions.md
SOLUTION_DIR=.solution

. $(dirname $0)/${EXERCISE_ENVFILE}

sanity_check() {

	if [ ! -f ${EXERCISE_ENVFILE} ] ; then
		echo Failure: Please run this script from exercise subdirectory.
		echo Consult instructor if in doubt.
		exit 10
	fi


	if [ -z "$EXERCISE" ] ; then
		echo Failure: \$EXERCISE not set. Contact instructor. 
		exit 10
	fi
}

usage() {
	echo Usage: $0 'instructions|setup|grade|clean'
}

generic_setup() {

	echo Setting up exercise: $EXERCISE
	echo 

	if [ -f ${EXERCISE_SETUP_ENVFILE} ] ; then
		. ${EXERCISE_SETUP_ENVFILE}
		echo Exercise seem to be already set up in ${EXERCISE_WORKDIR}.
		echo Run "$0 clean" then "$0 setup" to start from scratch.
		exit 20
	fi

	EXERCISE_WORKDIR=$(mktemp -d '/tmp/ex-XXXXX')

	echo "EXERCISE_WORKDIR=${EXERCISE_WORKDIR}" > ${EXERCISE_SETUP_ENVFILE}

	exercise_setup

	if [ -d ${EXERCISE_MATERIALS} ] ; then
		cp -vR ${EXERCISE_MATERIALS}/* ${EXERCISE_WORKDIR}/
	fi

	echo Exercise work directory is ${EXERCISE_WORKDIR}.

	if [ -f ${EXERCISE_SETUP_TEXT} ] ; then
		markdown_view_stdout ${EXERCISE_SETUP_TEXT}
	fi
}

check_exercise_setup() {

	if [ -f ${EXERCISE_SETUP_ENVFILE} ] ; then
		return 
	else
		echo Failure: Exercise was never set up. 
		echo Did you forget to "$0 setup" ?
		exit 20
	fi

}

generic_clean() {

	echo Cleaning up exercise: $EXERCISE
	echo 

	check_exercise_setup
	. ${EXERCISE_SETUP_ENVFILE}

	exercise_clean

	rm -rfv $EXERCISE_WORKDIR

	rm ${EXERCISE_SETUP_ENVFILE}
}

generic_grade() {

	echo Grading exercise: $EXERCISE
	echo 

	check_exercise_setup
	. ${EXERCISE_SETUP_ENVFILE}

	exercise_grade
}

generic_solve() {
	echo Solving exercise: $EXERCISE

	check_exercise_setup
	. ${EXERCISE_SETUP_ENVFILE}

	cp -v $SOLUTION_DIR/* $EXERCISE_WORKDIR/

	exercise_solve
}

subcmd_run() {

	case "$1" in
	setup)
		generic_setup
		;;
	grade)
		generic_grade	
		;;
	clean)
		generic_clean	
		;;
	solve)
		generic_solve
		;;
	instructions)
		markdown_view_interactive ${INSTRUCTIONS_TEXT} 
		;;
	*)
		usage
		;;
	esac

}

markdown_view_interactive() {
	pandoc $1 | lynx -stdin
}

markdown_view_stdout() {
	pandoc $1 | lynx -stdin -dump
}

